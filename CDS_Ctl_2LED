/**********************************************************************************************************************
 * \file Cpu0_Main.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxScuWdt.h"

#include "IfxPort.h"
#include "IfxPort_PinMap.h"
// #include "Platform_Types.h"
#include "Driver_Stm.h"

// main.c
#include "asclin.h"

// GPIO related
#define PCn_2_IDX 19
#define P2_IDX 2
#define PCn_1_IDX 11
#define P1_IDX 1

// ERU related
#define EXIS0_IDX 4
#define FEN0_IDX 8
#define EIEN0_IDX 11
#define INP0_IDX 12
#define IGP0_IDX 14

// SRC related
#define SRE_IDX 10
#define TOS_IDX 11

// segments
#define SCLK IfxPort_P00_0
#define RCLK IfxPort_P00_1
#define DIO IfxPort_P00_2

uint8_t _LED_0F[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};

typedef struct
{
    uint32_t u32nuCnt1ms;
    uint32_t u32nuCnt10ms;
    uint32_t u32nuCnt100ms;
    uint32_t u32nuCnt1000ms;

} TestCnt;

// Task scheduling related
void AppScheduling(void);
void AppTask1ms(void);
void AppTask10ms(void);
void AppTask100ms(void);
void AppTask1000ms(void);
int adcResult;
int CDS_Result;
/***********************************************************************/
/*Variable*/
/***********************************************************************/
TestCnt stTestCnt;

IfxCpu_syncEvent g_cpuSyncEvent = 0;
IfxCpu_syncEvent cpuSyncEvent = 0;

void initGPIO(void);
void initERU(void);
void send(uint8_t X);
void send_port(uint8_t X, uint8_t port);
void LCD_Control(void);
void LCD_Print(int *n1, int *n2, int *n3, int *n4);
void LCD_NUM_Convert(int *value, int *n1, int *n2, int *n3, int *n4);
void CDS_Control_LED(void);

int core0_main(void)
{
    IfxCpu_enableInterrupts();

    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());

    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);

    initGPIO();
    Driver_Stm_Init();
    Driver_Adc_Init();
    init_ASCLIN_UART(); // init uart
    P00_IOCR0.U = 0x00808080;

    while (1)
    {
        print("hi, nice to meet you" ENDLINE);
        AppScheduling();

        LCD_Control();
    }
    return (1);
}
void LCD_Control(void)
{
    int n1, n2, n3, n4;
    LCD_NUM_Convert(&CDS_Result, &n1, &n2, &n3, &n4);
    LCD_Print(&n1, &n2, &n3, &n4);
}
void LCD_NUM_Convert(int *value, int *n1, int *n2, int *n3, int *n4)
{
    *n1 = (int)(*value) % 10;
    *n2 = (int)((*value) % 100) / 10;
    *n3 = (int)((*value) % 1000) / 100;
    *n4 = (int)((*value) % 10000) / 1000;
}
void LCD_Print(int *n1, int *n2, int *n3, int *n4)
{
    for (int i = 0; i < 50; i++)
    {
        send_port(_LED_0F[*n1], 0x1);
        send_port(_LED_0F[*n2], 0x2);
        send_port(_LED_0F[*n3], 0x4);
        send_port(_LED_0F[*n4], 0x8);
    }
}
void CDS_Control_LED(void)
{
    if (CDS_Result < 2400) // LED RED ON
    {
        IfxPort_setPinHigh(IfxPort_P02_7.port, IfxPort_P02_7.pinIndex); // Red
        IfxPort_setPinHigh(IfxPort_P10_1.port, IfxPort_P10_1.pinIndex); // Red
        IfxPort_setPinLow(IfxPort_P10_3.port, IfxPort_P10_3.pinIndex); // Blue
        IfxPort_setPinLow(IfxPort_P10_2.port, IfxPort_P10_2.pinIndex); // Blue
        IfxPort_setPinLow(IfxPort_P10_5.port, IfxPort_P10_5.pinIndex); // Green
    }
    else                   // LED BLUE ON
    {
        IfxPort_setPinHigh(IfxPort_P10_3.port, IfxPort_P10_3.pinIndex); // Blue
        IfxPort_setPinHigh(IfxPort_P10_2.port, IfxPort_P10_2.pinIndex); // Blue
        IfxPort_setPinLow(IfxPort_P02_7.port, IfxPort_P02_7.pinIndex); // Red
        IfxPort_setPinLow(IfxPort_P10_1.port, IfxPort_P10_1.pinIndex); // Red
        IfxPort_setPinLow(IfxPort_P10_5.port, IfxPort_P10_5.pinIndex); //Green
    }
}
void initGPIO(void)
{
    P02_IOCR0.U &= ~(0x1F << PCn_1_IDX); // xxx0 0000
    P02_IOCR0.U |= 0x02 << PCn_1_IDX;    // xxx0 0010

    P10_IOCR0.U &= ~(0x1F << PCn_2_IDX); // xxxx
    P10_IOCR0.U |= 0x10 << PCn_2_IDX;

    P10_IOCR0.U &= ~(0x1F << 11);
    P10_IOCR0.U |= 0x10 << 11;

    // p10.3
    P10_IOCR0.U &= ~(0x1F << 27);
    P10_IOCR0.U |= 0x10 << 27;

    // p10.5
    P10_IOCR4.U &= ~(0x1F << 11);
    P10_IOCR4.U |= 0x10 << 11;

    // p02.7
    P02_IOCR4.U &= ~(0x1F << 27);
    P02_IOCR4.U |= 0x10 << 27;
}

void AppTask1ms(void)
{
    stTestCnt.u32nuCnt1ms++;
}

void AppTask10ms(void)
{
    stTestCnt.u32nuCnt10ms++;
    /*ADC0 Test*/
    adcResult = Driver_Adc0_DataObtain();
    Driver_Adc0_ConvStart();
    /*ADC1 Test*/
    CDS_Result = Driver_Adc1_DataObtain();
    Driver_Adc1_ConvStart();
}

void AppTask100ms(void)
{
    static int flag = 0;
    /*
    if (flag == 0)
    {
        IfxPort_setPinLow(IfxPort_P10_1.port, IfxPort_P10_1.pinIndex);
        flag = 1;
    }
    else
    {
        IfxPort_setPinHigh(IfxPort_P10_1.port, IfxPort_P10_1.pinIndex);
        flag = 0;
    }

    if (adcResult > 2600)
    {
        IfxPort_setPinHigh(IfxPort_P10_3.port, IfxPort_P10_3.pinIndex);
        IfxPort_setPinLow(IfxPort_P10_5.port, IfxPort_P10_5.pinIndex);
        IfxPort_setPinLow(IfxPort_P02_7.port, IfxPort_P02_7.pinIndex);
    }
    else if (adcResult <= 1300)
    {
        IfxPort_setPinHigh(IfxPort_P02_7.port, IfxPort_P02_7.pinIndex);
        IfxPort_setPinLow(IfxPort_P10_3.port, IfxPort_P10_3.pinIndex);
        IfxPort_setPinLow(IfxPort_P10_5.port, IfxPort_P10_5.pinIndex);
    }
    else
    {
        IfxPort_setPinHigh(IfxPort_P10_5.port, IfxPort_P10_5.pinIndex);
        IfxPort_setPinLow(IfxPort_P10_3.port, IfxPort_P10_3.pinIndex);
        IfxPort_setPinLow(IfxPort_P02_7.port, IfxPort_P02_7.pinIndex);
    }*/

     CDS_Control_LED();
    stTestCnt.u32nuCnt100ms++;
}

void AppTask1000ms(void)
{
    /*
    static int flag = 0;
    if (flag == 0)
    {
        IfxPort_setPinLow(IfxPort_P10_2.port, IfxPort_P10_2.pinIndex);
        flag = 1;
    }
    else
    {
        IfxPort_setPinHigh(IfxPort_P10_2.port, IfxPort_P10_2.pinIndex);
        flag = 0;
    }
    */
    stTestCnt.u32nuCnt1000ms++;
}

void AppScheduling(void)
{
    if (stSchedulingInfo.u8nuScheduling1msFlag == 1u)
    {
        stSchedulingInfo.u8nuScheduling1msFlag = 0u;
        AppTask1ms();

        if (stSchedulingInfo.u8nuScheduling10msFlag == 1u)
        {
            stSchedulingInfo.u8nuScheduling10msFlag = 0u;
            AppTask10ms();
        }

        if (stSchedulingInfo.u8nuScheduling100msFlag == 1u)
        {
            stSchedulingInfo.u8nuScheduling100msFlag = 0u;
            AppTask100ms();
        }
        if (stSchedulingInfo.u8nuScheduling1000msFlag == 1u)
        {
            stSchedulingInfo.u8nuScheduling1000msFlag = 0u;
            AppTask1000ms();
        }
    }
}
void send(uint8_t X)
{
    for (int i = 8; i >= 1; i--)
    {
        if (X & 0x80)
        {
            IfxPort_setPinHigh(DIO.port, DIO.pinIndex);
        }
        else
        {
            IfxPort_setPinLow(DIO.port, DIO.pinIndex);
        }
        X <<= 1;
        IfxPort_setPinLow(SCLK.port, SCLK.pinIndex);
        IfxPort_setPinHigh(SCLK.port, SCLK.pinIndex);
    }
}
void send_port(uint8_t X, uint8_t port)
{
    send(X);
    send(port);
    IfxPort_setPinLow(RCLK.port, RCLK.pinIndex);
    IfxPort_setPinHigh(RCLK.port, RCLK.pinIndex);
}
